WORD GUESSING GAME - AI DEVELOPMENT NOTES
=======================================

Project Structure:
-----------------
/d0_simple_langchain/
â”œâ”€â”€ app.py               # Main Flask application
â”œâ”€â”€ requirements.txt     # Project dependencies
â”œâ”€â”€ static/
â”‚   â”œâ”€â”€ css/
â”‚   â”‚   â””â”€â”€ style.css   # Styling for the game interface
â”‚   â””â”€â”€ js/
â”‚       â””â”€â”€ game.js     # Client-side game logic
â””â”€â”€ templates/
    â””â”€â”€ index.html      # Main game interface template

Key Features Implemented:
------------------------
1. Web Interface:
   - Chat-style interface with fixed height (300px) display area
   - Scrollable message history
   - Custom emoji indicators (ðŸ¤– for AI, ðŸ‘¤ for human)
   - Attempt counter (max 10 attempts)
   - Restart and Exit game buttons

2. Game Logic:
   - OpenAI integration for word generation
   - Intelligent hint system using LangChain
   - Word diversity system to prevent repetition
   - Game state management
   - Auto-start on page load

3. UI/UX Features:
   - Message bubbles with distinct colors (blue for AI, yellow for user)
   - Custom scrollbar styling
   - Responsive layout
   - Emoji animations
   - Clear message history on restart

Technical Implementation Details:
-------------------------------
1. Flask Routes:
   - / (GET): Main game interface
   - /start-game (POST): Initialize new game
   - /make-guess (POST): Process player guesses
   - /reveal-word (POST): Show current word
   - /exit-game (POST): End current game

2. OpenAI Integration:
   - Uses GPT-3.5-turbo model
   - Temperature: 0.7 for hint generation
   - Strict prompt engineering to prevent word revelation

3. Game State Management:
   - Tracks current word
   - Previous guesses
   - Game active status
   - Attempt counter
   - Previous words cache

4. Environment Setup:
   - Requires .env file with OPENAI_API_KEY
   - Python 3.x required
   - Key dependencies in requirements.txt

Development History:
------------------
1. Initial Setup:
   - Basic Flask application with OpenAI integration
   - Simple word generation system

2. UI Enhancements:
   - Added chat interface
   - Implemented emoji indicators
   - Fixed height display area
   - Custom scrollbar

3. Game Logic Improvements:
   - Added attempt limiting
   - Implemented word diversity
   - Enhanced hint system
   - Auto-start functionality

4. Recent Updates:
   - Message clearing on restart
   - Emoji styling improvements
   - Fixed display area scrolling
   - Requirements.txt creation

Future Considerations:
--------------------
1. Potential Enhancements:
   - Difficulty levels
   - Category selection
   - Score tracking
   - Multiplayer support
   - Achievement system

2. Known Areas for Improvement:
   - Additional error handling
   - Network timeout handling
   - Loading state indicators
   - Mobile responsiveness
   - Offline mode support

Environment Variables:
--------------------
Required in .env file:
OPENAI_API_KEY=your_api_key_here

Installation Instructions:
------------------------
1. Create and activate virtual environment (recommended)
2. Install dependencies: pip install -r requirements.txt
3. Create .env file with OpenAI API key
4. Run application: python app.py
5. Access at http://127.0.0.1:5000

Note for AI Assistants:
----------------------
This implementation focuses on simplicity and user experience while maintaining
code modularity. When making changes, preserve the existing game mechanics and
enhance rather than replace current functionality. Pay special attention to the
hint system's rules about never revealing the target word. 